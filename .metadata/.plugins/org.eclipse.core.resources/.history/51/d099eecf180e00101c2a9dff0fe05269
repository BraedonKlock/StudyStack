package StudyStack;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/*
* The CourseList class is the manager for all course-related operations in the StudyStack program.
* It contains an arrayList of course objects and each course can contain an arrayList of homework.
* 
* This class allows users to:
* - Add, edit, delete, list, and search for course
* 
* - it also manages each courses associated homework including:
* 	adding, editing, and deleting individual homework and it's attributes from a course object
* 
* - also allows users to save and load course data from a CSV file ("courses.csv")
* 
* Each course contains a name, course code, a list of homework (name + due date).
*/

public class CourseList {
 static Scanner scanner = new Scanner(System.in);
	 
	 static List<Course> CourseList = new ArrayList<>();
	 
	 // Add courses and associated homework
	public static void addCourse() throws StudyStackException {
    System.out.println("Enter course name (or type \"2\" to exit): ");
    String name = scanner.nextLine();
    if (name.trim().equals("2")) return;

    System.out.println("Enter course code (or type \"2\" to exit): ");
    String courseCode = scanner.nextLine();
    if (courseCode.trim().equals("2")) return;
    
    Course course = new Course(name, courseCode);

    // Adding homework. While loop controls flow
    while (true) {
        System.out.println("Add Homework? (1 = yes/2 = no):");
        String response = scanner.nextLine().trim().toLowerCase();

        if (response.trim().equals("2"))
            break;
         else if (response.trim().equals("1")) {
        	
        	// While loop controls flow and user input
            while (true) {
                System.out.println("Homework name (or type \"2\" to stop adding homework):"); //
                String homeworkName = scanner.nextLine();
                if (homeworkName.trim().equals("2")) break;

                    System.out.println("Due date (or type \"2\" to exit:");
                   String dueDate = scanner.nextLine();
                    if (dueDate.trim().equals("2")) break;   
            
                // Adds homework to courses
                course.addHomework(new Homework(homeworkName, dueDate));
            	}
            }
        }
        
        	// Add the course to the list
        	CourseList.add(course);
        	System.out.println("\n***course added!***\n");
        	saveToFile();
        	System.out.println("\n***course saved successfully!***\n");
        }
    
	// Editing course attributes and associated homework
	public static void editCourse() throws StudyStackException {
	    if (CourseList.isEmpty()) {
	        throw new StudyStackException("\n***There are no jobs to edit***\n");
	    }

	    listCourses();
	    
	    int index;
	    
	    // Finding course and using while loop to control flow and user input
	    while (true) {
	        try {
	            System.out.print("Enter course number to edit: ");
	            index = Integer.parseInt(scanner.nextLine());

	            if (index < 0 || index >= CourseList.size()) {
	                System.out.println("\n***Invalid input! Enter a number between 0 and " + (CourseList.size() - 1) + "***\n");// input must be within courseList size
	            } else {
	                break;
	            }
	        } catch (NumberFormatException e) {
	            System.out.println("\n***Invalid input! Please enter a valid number***\n"); //catches letters
	        }
	    }
	    
	    //gets the course number the user inputed
	    Course course = CourseList.get(index);
	    System.out.println("\nEditing Job: " + course.getName());
	    
	    // Editing course name
	    System.out.print("New name (or press Enter to keep): ");
	    String newName = scanner.nextLine();
	    if (!newName.isEmpty()) course.setName(newName);
	    
	    // Editing course code
	    System.out.print("\nNew course code (or press Enter to keep): ");
	    String newDesc = scanner.nextLine();
	    if (!newDesc.isEmpty()) course.setCourseCode(newDesc);
	    
	    //while loop to control user input on whether they want to edit homework
	    while (true) {
	        System.out.print("\nDo you want to edit homework? (1 = yes/2 = no): ");
	        String homeworkEdit = scanner.nextLine();

	        if (homeworkEdit.trim().equals("2")) break;

	        if (homeworkEdit.trim().equals("1")) {
	        	
	        	// While loop to control user input. gives user ability to stay in the "add, edit, or delete homework" loop
	            while (true) {
	                System.out.print("\nDo you want to Add, Edit, or Delete homework? (Add/Edit/Delete/type \"2\" to Exit): ");
	                String action = scanner.nextLine();

	                if (action.trim().equals("2")) break;

	                if (action.equalsIgnoreCase("Edit")) {
	                    List<Homework> homework = course.getHomework();

	                    if (homework.isEmpty()) {
	                        System.out.println("\n***There is no homework to edit***\n");
	                        continue;
	                    }
	                    
	                    // Lists homework for users chosen course
	                    System.out.println("\n***Homework for this course***");
	                    for (int i = 0; i < homework.size(); i++) {
	                        Homework work = homework.get(i);
	                        System.out.println(i + ". Name: " + work.getName() + " | Due date: " + work.getDueDate());
	                    }
	                    
	                    // This while loop controls the input of the user
	                    int homeworkNumber;
	                    while (true) {
	                        try {
	                            System.out.print("\nEnter the homework number to edit: ");
	                            homeworkNumber = Integer.parseInt(scanner.nextLine());

	                            if (homeworkNumber < 0 || homeworkNumber >= homework.size()) {
	                                System.out.println("\n***Invalid homework number! Try again***\n");
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number***\n");
	                        }
	                    }
	                    
	                    // Getting users chosen homework
	                    Homework selectedHomework = homework.get(homeworkNumber);
	                    
	                    // Editing homework name
	                    System.out.print("\nNew homework name (or press Enter to keep): ");
	                    String newHomeworkName = scanner.nextLine();
	                    if (!newHomeworkName.isEmpty()) {
	                        selectedHomework.setName(newHomeworkName);
	                    }
	                    
	                    // Editing homework due date
	                    System.out.print("\nNew due date (or press Enter to keep): ");
	                    String newDueDate = scanner.nextLine();
	                    if (!newDueDate.isEmpty()) {
                        	selectedHomework.setDueDate(newDueDate);
                            System.out.println("\n***Homework updated***\n");     
	                    }
	                    
	                    //Adding homework to users chosen course
	                } else if (action.equalsIgnoreCase("Add")) {
	                    System.out.print("\nHomework name (or type \"2\" to cancel): ");
	                    String hwName = scanner.nextLine();
	                    if (hwName.trim().equals("2")) continue;

                        System.out.print("\nDue date (must be a number): ");
                        String dueDate = scanner.nextLine();
	                      
	                   // Adding new homework to users chosen course
	                    course.addHomework(new Homework(hwName, dueDate));
	                    System.out.println("\n***homework added***\n");
	      
	                } else if (action.equalsIgnoreCase("Delete")) {
	                    List<Homework> homework = course.getHomework();

	                    if (homework.isEmpty()) {
	                        System.out.println("\n***There is no homework to delete***\n");
	                        continue;
	                    }

	                    for (int i = 0; i < homework.size(); i++) {
	                        System.out.println(i + ". " + homework.get(i).getName() + " | Due date: " + homework.get(i).getDueDate());
	                    }
	                    
	                    // Deleting homework
	                    int deleteIndex;
	                    while (true) {
	                        System.out.print("\nEnter the homework number to delete: ");
	                        try {
	                            deleteIndex = Integer.parseInt(scanner.nextLine());
	                            if (deleteIndex < 0 || deleteIndex >= homework.size()) { //Users input must be within homework.size
	                                System.out.println("\n***Invalid homework number***\n");
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number***\n");
	                        }
	                    }
	                    
	                    // Removing homework from course array
	                    Homework removedHw = homework.remove(deleteIndex);
	                    System.out.println("\nDeleted homework: " + removedHw.getName());
	                } else {
	                    System.out.println("\n***Invalid input. Please enter Add, Edit, Delete, or type \"2\" to exit***\n");
	                }
	            }
	        } else {
	            System.out.println("\n***Invalid input! Please enter '1 = yes' or '2 = no'***\n");
	        }
	    }
	    saveToFile();
	    System.out.println("\n***Course updated successfully***\n");
	}
	
		// Delete course method
	    public static void deleteCourse() throws Exception {
	        if (CourseList.isEmpty()) {
	            throw new Exception("\n***There are no courses to delete***\n"); // Handles empty courseList
	        }

	        listCourses(); 

	        int index = -1; // index initialized to a negative number for safe handling
	        
	        // While loop controls flow
	        while (true) {
	            System.out.print("Enter course number to delete or type \"Exit\" to exit: ");
	            String input = scanner.nextLine();
	            
	            if(input.equalsIgnoreCase("Exit")) {
	            	return;
	            }

	            try {
	                index = Integer.parseInt(input);

	                if (index < 0 || index >= CourseList.size()) {
	                    System.out.println("\n***Invalid course number! Please enter a number between 0 and " + (CourseList.size() - 1) + "***\n"); // Users input must be within CourseList size
	                } else {
	                    break;
	                }
	            } catch (NumberFormatException e) {
	                System.out.println("\n***Invalid input! Please enter a valid number***\n");// Catches the input of letters
	            }
	        }
	        
	        // Confirm deletion. While loop controls user input
	        while(true) {
		        System.out.println("\n***are you sure you want to delete this course? type 1 = \"yes\" or 2 = \"no\":\n" + CourseList.get(index) + "***\n");
		        int confirm = scanner.nextInt();
		        try {
		        if (confirm == 1) {
		        	Course removed = CourseList.remove(index);
		        	System.out.println("Deleted: " + removed.getName());
		        	saveToFile();
		        	return;
		        } else if (confirm == 2) {
		        	System.out.println("\n***Deletion cancelled***\n");
		        	return;
		        }
		        else {
		        	System.out.println("\n***Invalid input enter 1 for\"yes\" or 2 for\"no\"***\n");
		        }
		        
		        } catch (NumberFormatException e) {
		        	System.out.println("\n***Invalid input enter 1 for \"yes\" or 2 for\"no\"***\n");
		        }
	        }
	    }
	    
	    // Search course method
	    public static void searchCourse() throws StudyStackException {
	    	if (CourseList.isEmpty()) {
	            throw new StudyStackException("\n***No jobs to search***\n"); // handling empty CourseList
	        }

	        System.out.println("\nEnter any keyword to search (course name, description, or tool name) or type \"2\" to exit:");
	        String term = scanner.nextLine().toLowerCase();
	        if (term.trim().equals(2)) return;

	        // using a boolean value to control flow.
	        boolean found = false;

	        System.out.println("\nSearch Results:");
	        for (int i = 0; i < CourseList.size(); i++) {
	            Course course = CourseList.get(i);
	            String courseName = course.getName().toLowerCase();
	            String courseCode = course.getCourseCode().toLowerCase();
	            StringBuilder homeworkNames = new StringBuilder();

	            for (Homework homework : course.getHomework()) {
	                homeworkNames.append(homework.getName().toLowerCase()).append(" ");
	            }

	            // Match user input against all three fields course name, course code and homework
	            if (courseName.contains(term) || courseCode.contains(term) || homeworkNames.toString().contains(term)) {
	                System.out.println("~ COURSE # " + i + " " + course);
	                found = true; // found set to true so that the next if statement doesn't execute
	            }
	        }

	        if (!found) {
	            System.out.println("\n***No course found matching \"" + term + "\"***\n");
	        }
	    }
	    
	    // This method Loads data from the 'courses.csv' file
	    public static void loadFromFile() {
	        CourseList.clear(); // Clearing existing course before loading new one

	        try (BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\braed\\AcademicProjects\\StudyStack\\StudyStack\\courses.csv"))) {
	            String line; // Holds each line of the file
	            while ((line = br.readLine()) != null) { // Read each line until end of file
	                String[] parts = line.split(",", 3); // name, course code, homework

	                if (parts.length < 3) continue;// Skips lines that don't have all parts

	                Course course = new Course(parts[0], parts[1]);

	                // homework
	                String[] hwData = parts[2].split("\\|"); // Splitting homework by '|'
	                for (String hwEntry : hwData) {
	                    String[] hwParts = hwEntry.split(":"); // Split homework name and duedate
	                    if (hwParts.length == 2) {
	                        course.addHomework(new Homework(hwParts[0], hwParts[1])); // Add homework to course
	                    }
	                }
	                CourseList.add(course); // Add course to courseList array
	            }

	            System.out.println("\n***courses loaded from file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error loading file: " + e.getMessage() + "***\n"); // Handle read error
	        }
	    }
	    
	    
	    public static void listCourses() throws StudyStackException {
	        if (CourseList.isEmpty()) {
	            throw new StudyStackException("\n***No courses found***\n");
	        }

	        for (int i = 0; i < CourseList.size(); i++) {
	            System.out.println("\n");
	            System.out.println("~ COURSE # " + i);
	            System.out.println(CourseList.get(i));
	            System.out.println("\n");
	        }
	    }
	    
	    // This method saves the CourseList array to the CSV file
	    public static void saveToFile() {
	        try (FileWriter writer = new FileWriter("C:\\Users\\braed\\AcademicProjects\\StudyStack\\StudyStack\\courses.csv")) {
	            for (Course course : CourseList) {
	                StringBuilder line = new StringBuilder();
	                line.append(course.getName()).append(",");
	                line.append(course.getCourseCode()).append(",");

	                // homework
	                List<Homework> homework = course.getHomework();
	                for (int i = 0; i < homework.size(); i++) {
	                    Homework hw = homework.get(i);
	                    line.append(hw.getName()).append(":").append(hw.getDueDate());
	                    if (i < homework.size() - 1) {
	                        line.append("|");
	                    }
	                }
	                writer.write(line.toString() + "\n");
	            }

	            System.out.println("\n***Courses saved to file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error saving file: " + e.getMessage() + "***\n"); // Catching error saving file
	        }
	    }
}
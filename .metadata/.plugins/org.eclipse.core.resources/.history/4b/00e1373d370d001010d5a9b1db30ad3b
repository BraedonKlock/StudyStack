package StudyStack;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class CourseList {
 static Scanner scanner = new Scanner(System.in);
	 
	 static List<Course> CourseList = new ArrayList<>();
	 
	 // Add jobs and associated tools and materials
	public static void addCourse() throws StudyStackException {
    System.out.println("Enter job name (or type \"Exit\"): ");
    String name = scanner.nextLine();
    if (name.equalsIgnoreCase("Exit")) return;

    System.out.println("Enter course code (or type \"Exit\"): ");
    String courseCode = scanner.nextLine();
    if (courseCode.equalsIgnoreCase("Exit")) return;
    
    Course course = new Course(name, courseCode);

    // Adding tools. While loop controls flow
    while (true) {
        System.out.println("Add Homework? (yes/no):");
        String response = scanner.nextLine().trim().toLowerCase();

        if (response.equals("no")) {
            break;
        } else if (response.equals("yes")) {
        	
        	// While loop controls flow and user input
            while (true) {
                System.out.println("Homework name (or type \"Exit\" to stop adding homework):"); //
                String homeworkName = scanner.nextLine();
                if (homeworkName.equalsIgnoreCase("Exit")) break;

                int dueDate = 0;
                while (true) {
                    System.out.println("Due date (must be a number):");
                    String dueDateStr = scanner.nextLine();
                    if (dueDateStr.equalsIgnoreCase("Exit")) break;

                    try {
                        dueDate = Integer.parseInt(dueDateStr);
                        if (dueDate < 1) throw new NumberFormatException(); // User must input number greater than 0
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println("\n***Invalid number. Please enter a valid positive number***\n"); // catches letters
                    }
                }
                
                // Adds tools to job
                course.addHomework(new Homework(homeworkName, Integer.toString(dueDate)));
            }
        } else {
            System.out.println("\n***Invalid input! Please enter \"yes\" or \"no\"***\n");
        }
    
        	// Add the job to the list after materials are added
        	CourseList.add(course);
        	System.out.println("\n***course added!***\n");
        	saveToFile();
        	System.out.println("\n***course saved successfully!***\n");
        }
    }
	
	// Editing Job attributes and associated tools and materials
	public static void editCourse() throws StudyStackException {
	    if (CourseList.isEmpty()) {
	        throw new StudyStackException("\n***There are no jobs to edit***\n");
	    }

	    listCourses();
	    
	    int index;
	    
	    // Finding job and using while loop to control flow and user input
	    while (true) {
	        try {
	            System.out.print("Enter course number to edit: ");
	            index = Integer.parseInt(scanner.nextLine());

	            if (index < 0 || index >= CourseList.size()) {
	                System.out.println("\n***Invalid input! Enter a number between 0 and " + (CourseList.size() - 1) + "***\n");// input must be within JobList size
	            } else {
	                break;
	            }
	        } catch (NumberFormatException e) {
	            System.out.println("\n***Invalid input! Please enter a valid number***\n"); //catches letters
	        }
	    }
	    
	    //gets the job number the user inputed
	    Course course = CourseList.get(index);
	    System.out.println("\nEditing Job: " + course.getName());
	    
	    // Editing Job name
	    System.out.print("New name (or press Enter to keep): ");
	    String newName = scanner.nextLine();
	    if (!newName.isEmpty()) course.setName(newName);
	    
	    // Editing Job description(notes)
	    System.out.print("\nNew course code (or press Enter to keep): ");
	    String newDesc = scanner.nextLine();
	    if (!newDesc.isEmpty()) course.setCourseCode(newDesc);
	    
	    //while loop to control user input on whether they want to edit tools
	    while (true) {
	        System.out.print("\nDo you want to edit homework? (yes/no): ");
	        String homeworkEdit = scanner.nextLine();

	        if (homeworkEdit.equalsIgnoreCase("no")) break;

	        if (homeworkEdit.equalsIgnoreCase("yes")) {
	        	
	        	// While loop to control user input. gives user ability to stay in the "add, edit, or delete tool" loop
	            while (true) {
	                System.out.print("\nDo you want to Add, Edit, or Delete homework? (Add/Edit/Delete/Exit): ");
	                String action = scanner.nextLine();

	                if (action.equalsIgnoreCase("Exit")) break;

	                if (action.equalsIgnoreCase("Edit")) {
	                    List<Homework> homework = course.getHomework();

	                    if (homework.isEmpty()) {
	                        System.out.println("\n***There is no homework to edit***\n");
	                        continue;
	                    }
	                    
	                    // Lists Tools for users chosen job
	                    System.out.println("\n***Homework for this course***");
	                    for (int i = 0; i < homework.size(); i++) {
	                        Homework work = homework.get(i);
	                        System.out.println(i + ". Name: " + work.getName() + " | Quantity: " + work.getDueDate());
	                    }
	                    
	                    // This while loop controls the input of the user
	                    int homeworkNumber;
	                    while (true) {
	                        try {
	                            System.out.print("\nEnter the homework number to edit: ");
	                            homeworkNumber = Integer.parseInt(scanner.nextLine());

	                            if (homeworkNumber < 0 || homeworkNumber >= homework.size()) {
	                                System.out.println("\n***Invalid homework number! Try again***\n");
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number***\n");
	                        }
	                    }
	                    
	                    // Getting users chosen homework
	                    Homework selectedHomework = homework.get(homeworkNumber);
	                    
	                    // Editing homework name
	                    System.out.print("\nNew homework name (or press Enter to keep): ");
	                    String newHomeworkName = scanner.nextLine();
	                    if (!newHomeworkName.isEmpty()) {
	                        selectedHomework.setName(newHomeworkName);
	                    }
	                    
	                    // Editing homework due date
	                    System.out.print("\nNew due date (or press Enter to keep): ");
	                    String newDueDateStr = scanner.nextLine();
	                    if (!newDueDateStr.isEmpty()) {
	                        try {
	                            int newDueDate = Integer.parseInt(newDueDateStr);
	                            if (newDueDate < 1) {
	                                System.out.println("\n***Due date must be positive***\n");// Quantity must be positive
	                            } else {
	                            	selectedHomework.setDueDate(Integer.toString(newDueDate));
	                                System.out.println("\n***Tool updated***\n");
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Invalid number. due date not updated***\n"); // Catches Letters
	                        }
	                    }
	                    
	                    //Adding homework to users chosen course
	                } else if (action.equalsIgnoreCase("Add")) {
	                    System.out.print("\nTool name (or type 'Exit' to cancel): ");
	                    String hwName = scanner.nextLine();
	                    if (hwName.equalsIgnoreCase("Exit")) continue;

	                    int dueDate = 0;
	                    while (true) {
	                        System.out.print("\nDue date (must be a number): ");
	                        String dueDateStr = scanner.nextLine();

	                        try {
	                            dueDate = Integer.parseInt(dueDateStr);
	                            if (dueDate < 1) throw new NumberFormatException();// Quantity must be greater than 0
	                            break;
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Invalid number. Please enter a valid positive number***\n"); // Catches letters
	                        }
	                    }
	                    
	                   // Adding new tool to users chosen job 
	                    course.addHomework(new Homework(hwName, Integer.toString(dueDate)));
	                    System.out.println("\n***homework added***\n");
	                } else if (action.equalsIgnoreCase("Delete")) {
	                    List<Homework> homework = course.getHomework();

	                    if (homework.isEmpty()) {
	                        System.out.println("\n***There is no homework to delete***\n");
	                        continue;
	                    }

	                    for (int i = 0; i < homework.size(); i++) {
	                        System.out.println(i + ". " + homework.get(i).getName() + " | Due date: " + homework.get(i).getDueDate());
	                    }
	                    
	                    // Deleting tool
	                    int deleteIndex;
	                    while (true) {
	                        System.out.print("\nEnter the homework number to delete: ");
	                        try {
	                            deleteIndex = Integer.parseInt(scanner.nextLine());
	                            if (deleteIndex < 0 || deleteIndex >= homework.size()) { //Users input must be within tool.size
	                                System.out.println("\n***Invalid homework number***\n");
	                            } else {
	                                break;
	                            }
	                        } catch (NumberFormatException e) {
	                            System.out.println("\n***Please enter a valid number***\n");
	                        }
	                    }
	                    
	                    // Removing tool from tools array
	                    Homework removedHw = homework.remove(deleteIndex);
	                    System.out.println("\nDeleted homework: " + removedHw.getName());
	                } else {
	                    System.out.println("\n***Invalid input. Please enter Add, Edit, Delete, or Exit***\n");
	                }
	            }
	        } else {
	            System.out.println("\n***Invalid input! Please enter 'yes' or 'no'***\n");
	        }
	    }
	    saveToFile();
	    System.out.println("\n***Course updated successfully***\n");
	}
	
		// Delete job method
	    public static void deleteCourse() throws Exception {
	        if (CourseList.isEmpty()) {
	            throw new Exception("\n***There are no courses to delete***\n"); // Handles empty jobList
	        }

	        listCourses(); 

	        int index = -1; // index initialized to a negative number for safe handling
	        
	        // While loop controls flow
	        while (true) {
	            System.out.print("Enter course number to delete: ");
	            String input = scanner.nextLine();
	            
	            if(input.equalsIgnoreCase("Exit")) {
	            	return;
	            }

	            try {
	                index = Integer.parseInt(input);

	                if (index < 0 || index >= CourseList.size()) {
	                    System.out.println("\n***Invalid course number! Please enter a number between 0 and " + (CourseList.size() - 1) + "***\n"); // Users input must be within jobList size
	                } else {
	                    break;
	                }
	            } catch (NumberFormatException e) {
	                System.out.println("\n***Invalid input! Please enter a valid number***\n");// Catches the input of letters
	            }
	        }
	        
	        // Confirm deletion. While loop controls user input
	        while(true) {
		        System.out.println("\n***are you sure you want to delete this course:\n" + CourseList.get(index) + "***\n");
		        String confirm= scanner.nextLine();
		        try {
		        if (confirm.equalsIgnoreCase("yes")) {
		        	Course removed = CourseList.remove(index);
		        	System.out.println("Deleted: " + removed.getName());
		        	saveToFile();
		        	return;
		        } else if (confirm.equalsIgnoreCase("no")) {
		        	System.out.println("\n***Deletion cancelled***\n");
		        	return;
		        }
		        else {
		        	System.out.println("\n***Invalid input enter \"yes\" or \"no\"***\n");
		        }
		        
		        } catch (NumberFormatException e) {
		        	System.out.println("\n***Invalid input enter \\\"yes\\\" or \\\"no\\\"***\n");
		        }
	        }
	    }
	    
	    // Search job method
	    public static void searchCourse() throws StudyStackException {
	    	if (CourseList.isEmpty()) {
	            throw new StudyStackException("\n***No jobs to search***\n"); // handling empty jobList
	        }

	        System.out.println("\nEnter any keyword to search (course name, description, or tool name):");
	        String term = scanner.nextLine().toLowerCase();

	        // using a boolean value to control flow.
	        boolean found = false;

	        System.out.println("\nSearch Results:");
	        for (int i = 0; i < CourseList.size(); i++) {
	            Course course = CourseList.get(i);
	            String courseName = course.getName().toLowerCase();
	            String description = course.getCourseCode().toLowerCase();
	            StringBuilder toolNames = new StringBuilder();

	            for (Homework homework : course.getHomework()) {
	                toolNames.append(homework.getName().toLowerCase()).append(" ");
	            }

	            // Match user input against all three fields job name, description, and tools
	            if (courseName.contains(term) || description.contains(term) || toolNames.toString().contains(term)) {
	                System.out.println(i + ". " + course);
	                found = true; // found set to true so that the next if statement doesn't execute
	            }
	        }

	        if (!found) {
	            System.out.println("\n***No course found matching \"" + term + "\"***\n");
	        }
	    	
	    }
	    
	    // This method Loads data from the 'jobs.csv' file
	    public static void loadFromFile() {
	        CourseList.clear(); // Clearing existing jobs before loading new one

	        try (BufferedReader br = new BufferedReader(new FileReader("courses.csv"))) {
	            String line; // Holds each line of the file
	            while ((line = br.readLine()) != null) { // Read each line until end of file
	                String[] parts = line.split(",", 4); // name, description, tools, materials

	                if (parts.length < 4) continue;// Skips lines that don't have all parts

	                Course course = new Course(parts[0], parts[1]);

	                // Tools
	                String[] hwData = parts[2].split("\\|"); // Splitting tools by '|'
	                for (String hwEntry : hwData) {
	                    String[] hwParts = hwEntry.split(":"); // Split tool name and quantity
	                    if (hwParts.length == 2) {
	                        course.addHomework(new Homework(hwParts[0], hwParts[1])); // Add tool to job
	                    }
	                }
	                CourseList.add(course); // Add job to JobList array
	            }

	            System.out.println("\n***courses loaded from file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error loading file: " + e.getMessage() + "***\n"); // Handle read error
	        }
	    }
	    
	    
	    public static void listCourses() throws StudyStackException {
			  if (CourseList.isEmpty()) {
			        throw new StudyStackException("\n***No courses found***\n"); // Throw error if no job exists
			    }

			    for (int i = 0; i < CourseList.size(); i++) {
			        System.out.println("==================================="//35
			        		+ "\n---COURSE # " + i +"---" + "\n" + CourseList.get(i) + // Printing job and the border around the job
			        		"===================================\n");
			    }
	    }
	    
	    // This method saves the jobList array to the CSV file
	    public static void saveToFile() {
	        try (FileWriter writer = new FileWriter("courses.csv")) {
	            for (Course course : CourseList) {
	                StringBuilder line = new StringBuilder();
	                line.append(course.getName()).append(",");
	                line.append(course.getCourseCode()).append(",");

	                // Tools
	                List<Homework> homework = course.getHomework();
	                for (int i = 0; i < homework.size(); i++) {
	                    Homework hw = homework.get(i);
	                    line.append(hw.getName()).append(":").append(hw.getDueDate());
	                    if (i < homework.size() - 1) {
	                        line.append("|");
	                    }
	                }
	                writer.write(line.toString() + "\n");
	            }

	            System.out.println("\n***Courses saved to file***\n");
	        } catch (IOException e) {
	            System.out.println("\n***Error saving file: " + e.getMessage() + "***\n"); // Catching error saving file
	        }
	    }
}
